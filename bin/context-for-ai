#!/bin/bash

VERSION="VERSION_PLACEHOLDER"
OUT_FILE="project_snapshot.txt"
EXTENSIONS=("kt" "java" "py")
EXTRA_FILES=("pom.xml" "build.gradle.kts" "application.yml" "requirements.txt" "pyproject.toml" "setup.py")

# === Show help ===
show_help() {
  cat << EOF
project-snapshot â€” generate a plain, machine-readable snapshot of your project.

Usage:
  project-snapshot.sh [--help] [--version]

Creates a plain .txt file with full contents of source and config files.
Files are listed in order:
  1. src/ or src/main/
  2. tests/, test/, or src/test/
  3. others

Output: $OUT_FILE

Options:
  --help        Show this help message
  --version     Show script version
EOF
  exit 0
}

# === Parse arguments ===
for arg in "$@"; do
  case $arg in
    --help)
      show_help
      ;;
    --version)
      echo "project-snapshot $VERSION"
      exit 0
      ;;
  esac
done

# === Start snapshot ===
echo "ðŸ§¾ Creating project snapshot: $OUT_FILE"
echo "" > "$OUT_FILE"

# === Find all relevant source files ===
EXT_PATTERN=""
for ext in "${EXTENSIONS[@]}"; do
  EXT_PATTERN="$EXT_PATTERN -name '*.$ext' -o"
done
EXT_PATTERN="${EXT_PATTERN% -o}"

ALL_FILES=()
while IFS= read -r file; do
  [[ "$file" =~ build/|target/|\.class$|__pycache__ ]] && continue
  ALL_FILES+=("$file")
done < <(eval "find . -type f \( $EXT_PATTERN \)" | sort)

# === Categorize: main/src â†’ test â†’ other ===
SRC_FILES=()
TEST_FILES=()
OTHER_FILES=()

for file in "${ALL_FILES[@]}"; do
  if [[ "$file" =~ (^|/)src/([^/]+/)?(main/)? ]]; then
    SRC_FILES+=("$file")
  elif [[ "$file" =~ (^|/)(tests|test|src/test)/ ]]; then
    TEST_FILES+=("$file")
  else
    OTHER_FILES+=("$file")
  fi
done

ORDERED_FILES=("${SRC_FILES[@]}" "${TEST_FILES[@]}" "${OTHER_FILES[@]}")

# === Dump source files ===
for file in "${ORDERED_FILES[@]}"; do
  echo "FILE: $file" >> "$OUT_FILE"
  cat "$file" >> "$OUT_FILE"
  echo >> "$OUT_FILE"
done

# === Dump extra project files ===
for file in "${EXTRA_FILES[@]}"; do
  [[ -f "$file" ]] || continue
  echo "FILE: $file" >> "$OUT_FILE"
  cat "$file" >> "$OUT_FILE"
  echo >> "$OUT_FILE"
done

echo "âœ… Snapshot created: $OUT_FILE"
